{"version":3,"sources":["../../src/routers/router.js"],"names":["AppRouter","app","setupRouters","db","get","uploadDir","upload","req","res","status","json","version","post","array","files","fileModels","each","fileObject","newfile","initObject","toJsonObject","push","newFile","length","collection","insertMany","err","result","error","message","toString","console","log","fileName","params","name","filePath","join","filename","download"],"mappings":";;;;;;;;AAAA;;AACA;;;;AACA;;;;AACA;;;;;;;;IAEMA,S;AACF,uBAAYC,GAAZ,EAAgB;AAAA;;AACZ,aAAKA,GAAL,GAAWA,GAAX;AACA,aAAKC,YAAL;AACH;;;;uCAEa;AACV,gBAAMD,MAAM,KAAKA,GAAjB;AACA,gBAAME,KAAKF,IAAIG,GAAJ,CAAQ,IAAR,CAAX;AACA,gBAAMC,YAAYJ,IAAIG,GAAJ,CAAQ,YAAR,CAAlB;AACA,gBAAME,SAASL,IAAIG,GAAJ,CAAQ,QAAR,CAAf;;AAEA;AACAH,gBAAIG,GAAJ,CAAQ,GAAR,EAAY,UAACG,GAAD,EAAKC,GAAL,EAAW;AACpB,uBAAOA,IAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBC;AADwB,iBAArB,CAAP;AAGF,aAJD;;AAMA;AACAV,gBAAIW,IAAJ,CAAS,aAAT,EAAuBN,OAAOO,KAAP,CAAa,WAAb,CAAvB,EAAkD,UAACN,GAAD,EAAMC,GAAN,EAAY;AAC1D,oBAAMM,QAAQ,iBAAEV,GAAF,CAAMG,GAAN,EAAW,OAAX,EAAoB,EAApB,CAAd;;AAEA,oBAAIQ,aAAY,EAAhB;;AAEA,iCAAEC,IAAF,CAAOF,KAAP,EAAc,UAACG,UAAD,EAAc;AACxB,wBAAMC,UAAU,mBAASjB,GAAT,EAAckB,UAAd,CAAyBF,UAAzB,EAAqCG,YAArC,EAAhB;AACAL,+BAAWM,IAAX,CAAgBC,OAAhB;AACH,iBAHD;;AAKA,oBAAGP,WAAWQ,MAAd,EAAqB;AACjBpB,uBAAGqB,UAAH,CAAc,OAAd,EAAuBC,UAAvB,CAAkCV,UAAlC,EAA8C,UAACW,GAAD,EAAMC,MAAN,EAAe;AACzD,4BAAID,GAAJ,EAAQ;AACJ,mCAAOlB,IAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBkB,uCAAO,EAACC,SAASH,IAAII,QAAJ,EAAV;AADiB,6BAArB,CAAP;AAGH,yBAJD,MAKK;AACDC,oCAAQC,GAAR,CAAY,cAAZ,EAA4BL,MAA5B;AACA,mCAAOnB,IAAIE,IAAJ,CAAS;AACZI,uCAAOC;AADK,6BAAT,CAAP;AAGH;AAEJ,qBAbD;AAcH,iBAfD,MAgBI;AACA,2BAAOP,IAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACkB,OAAO,EAACC,SAAS,sBAAV,EAAR,EAArB,CAAP;AACH;;AAED,uBAAOrB,IAAIE,IAAJ,CACH,EAACI,OAAOC,UAAR,EADG,CAAP;AAGH,aAjCD;;AAmCA;AACAd,gBAAIG,GAAJ,CAAQ,qBAAR,EAA+B,UAACG,GAAD,EAAKC,GAAL,EAAW;AACtC,oBAAMyB,WAAW1B,IAAI2B,MAAJ,CAAWC,IAA5B;;AAEA,oBAAMC,WAAW,eAAKC,IAAL,CAAUhC,SAAV,EAAqB,GAArB,EAA0BiC,QAA1B,CAAjB;;AAEA,uBAAO9B,IAAI+B,QAAJ,CAAaH,QAAb,EAAuBH,QAAvB,EAAiC,UAACP,GAAD,EAAO;AAC3C,wBAAGA,GAAH,EAAO;AACH,+BAAOlB,IAAIC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CACH,EAACkB,OACG,EAACC,SAAQ,gBAAT;AADJ,yBADG,CAAP;AAIH,qBALD,MAMI;AACAE,gCAAQC,GAAR,CAAY,iBAAZ;AACH;AACJ,iBAVM,CAAP;AAWH,aAhBD;;AAkBAD,oBAAQC,GAAR,CAAY,wBAAZ;AACH;;;;;;kBAGUhC,S","file":"router.js","sourcesContent":["import {version} from '../../package.json';\nimport path from 'path';\nimport _ from 'lodash';\nimport File from '../models/file';\n\nclass AppRouter {\n    constructor(app){\n        this.app = app;\n        this.setupRouters();\n    }\n\n    setupRouters(){\n        const app = this.app;\n        const db = app.get('db');\n        const uploadDir = app.get('storageDir');\n        const upload = app.get('upload');\n\n        //root routing\n        app.get('/',(req,res)=>{\n           return res.status(200).json({\n               version: version\n           });\n        });\n\n        //Upload Routing\n        app.post('/api/upload',upload.array('test-file'), (req, res)=>{\n            const files = _.get(req, 'files', []);\n\n            let fileModels =[];\n\n            _.each(files, (fileObject)=>{\n                const newfile = new File(app).initObject(fileObject).toJsonObject();\n                fileModels.push(newFile);\n            });\n\n            if(fileModels.length){\n                db.collection('files').insertMany(fileModels, (err, result)=>{\n                    if (err){\n                        return res.status(503).json({\n                            error: {message: err.toString()}\n                        })\n                    }\n                    else {\n                        console.log('files saved:', result);\n                        return res.json({\n                            files: fileModels\n                        })\n                    }\n\n                });\n            }\n            else{\n                return res.status(503).json({error: {message: 'File upload required'}});\n            }\n\n            return res.json(\n                {files: fileModels}\n                );\n        });\n\n        //download routing\n        app.get('/api/download/:name', (req,res)=>{\n            const fileName = req.params.name;\n\n            const filePath = path.join(uploadDir, '/', filename);\n\n            return res.download(filePath, fileName, (err)=>{\n                if(err){\n                    return res.status(501).json(\n                        {error:\n                            {message:\"file not found\"}\n                    });\n                }\n                else{\n                    console.log(\"file downloaded\");\n                }\n            });\n        });\n\n        console.log('routing setup complete');\n    }\n}\n\nexport default AppRouter;"]}